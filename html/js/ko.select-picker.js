// Generated by CoffeeScript 1.12.8
(function() {
  ko.bindingHandlers.selectPicker = {
    init: function(element, valueAccessor, allBindingsAccessor) {
      if ($(element).is('select')) {
        if (ko.isObservable(valueAccessor())) {
          if ($(element).prop('multiple') && $.isArray(ko.utils.unwrapObservable(valueAccessor()))) {
            ko.bindingHandlers.selectedOptions.init(element, valueAccessor, allBindingsAccessor);
          } else {
            ko.bindingHandlers.value.init(element, valueAccessor, allBindingsAccessor);
          }
        }
        $(element).addClass('selectpicker').selectpicker();
      }
    },
    update: function(element, valueAccessor, allBindingsAccessor) {
      var isDisabled, options, resetOnDisabled, selectPickerOptions;
      if ($(element).is('select')) {
        selectPickerOptions = allBindingsAccessor().selectPickerOptions;
        if (typeof selectPickerOptions !== 'undefined' && selectPickerOptions !== null) {
          options = selectPickerOptions.optionsArray;
          isDisabled = selectPickerOptions.disabledCondition || false;
          resetOnDisabled = selectPickerOptions.resetOnDisabled || false;
          if (ko.utils.unwrapObservable(options).length > 0) {
            ko.bindingHandlers.options.update(element, options, allBindingsAccessor);
          }
          if (isDisabled && resetOnDisabled) {
            $(element).selectpicker('val', $(element).children('option:first').val());
          }
          $(element).prop('disabled', isDisabled);
        }
        if (ko.isObservable(valueAccessor())) {
          if ($(element).prop('multiple') && $.isArray(ko.utils.unwrapObservable(valueAccessor()))) {
            ko.bindingHandlers.selectedOptions.update(element, valueAccessor);
          } else {
            ko.bindingHandlers.value.update(element, valueAccessor);
          }
        }
        $(element).selectpicker('refresh');
      }
    }
  };

}).call(this);
