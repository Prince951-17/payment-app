// Generated by CoffeeScript 1.12.8
(function() {
  $(function() {
    var Api, convertIntToDateTime, defaultPayment, getAllDirections, getAllGroups, getAllTeachers, getLastPaymentId, indexOfByObject, vm;
    Api = pywebview.api;
    defaultPayment = {
      id: 0,
      price: '',
      comments: '',
      type: '',
      month: '',
      groupId: '',
      studentId: '',
      teacherId: '',
      directionId: '',
      groupName: '',
      teacherName: '',
      studentFullName: ''
    };
    vm = ko.mapping.fromJS({
      currentDateTime: '',
      payment: defaultPayment,
      groupsList: [],
      paymentList: [],
      studentsList: [],
      teachersList: [],
      allGroupsList: [],
      directionsList: [],
      totalPayment: 0,
      list: [1, 2, 3, 4, 5, 6, 7, 8, 9],
      login: '',
      password: ''
    });
    convertIntToDateTime = function(intDate) {
      if (intDate) {
        return moment(intDate).format('DD.MM.YYYY HH:mm');
      }
    };
    indexOfByObject = function(array, attr, value) {
      var i;
      i = 0;
      while (i < array.length) {
        if (array[i][attr] === value) {
          return i;
        }
        i += 1;
      }
      return -1;
    };
    vm.onSubmit = function() {
      toastr.clear();
      if (!vm.login()) {
        toastr.error("Iltimos guruh ochilgan vaqtni kiriting!");
        return false;
      } else if (!vm.password()) {
        toastr.error("Iltimos guruh nomini kiriting!");
        return false;
      } else {
        return Api.check_user(vm.login(), vm.password()).then(function(response) {
          Api.logger(response);
          if (response.code === 401) {
            return toastr.error(response.error);
          }
        });
      }
    };
    vm.currentDateTime(convertIntToDateTime(new Date()));
    setInterval(function() {
      return vm.currentDateTime(convertIntToDateTime(new Date()));
    }, 1000);
    setTimeout(function() {
      return getAllDirections();
    }, 1000);
    getAllGroups = function() {
      return Api.get_groups().then(function(response) {
        Api.logger(response);
        return vm.allGroupsList(response);
      });
    };
    getAllTeachers = function() {
      return Api.get_teachers().then(function(response) {
        Api.logger(response);
        return vm.teachersList(response);
      });
    };
    getLastPaymentId = function() {
      return Api.get_last_payment_id().then(function(response) {
        Api.logger(response);
        return vm.payment.id(response);
      });
    };
    getAllDirections = function() {
      return Api.get_directions().then(function(response) {
        Api.logger(response);
        vm.directionsList(response);
        return getAllGroups().then(function() {
          return getLastPaymentId().then(function() {
            return getAllTeachers();
          });
        });
      });
    };
    vm.payment.directionId.subscribe(function(id) {
      return vm.groupsList(vm.allGroupsList().filter(function(e) {
        return e.direction_id === id;
      }));
    });
    vm.payment.groupId.subscribe(function(id) {
      if (id) {
        return Api.get_students(id).then(function(response) {
          var index, j, len, ref, ref1, student, tIndex, teacherId;
          Api.logger(response);
          for (j = 0, len = response.length; j < len; j++) {
            student = response[j];
            student.fullname = student.firstname + " " + student.lastname;
            vm.studentsList.push(student);
          }
          index = indexOfByObject(vm.groupsList(), 'id', id);
          teacherId = (ref = vm.groupsList()[index]) != null ? ref.teacher_id : void 0;
          tIndex = indexOfByObject(vm.teachersList(), 'id', teacherId);
          return vm.payment.teacherName((ref1 = vm.teachersList()[tIndex]) != null ? ref1.name : void 0);
        });
      }
    });
    vm.payment.studentId.subscribe(function(id) {
      if (id) {
        return Api.get_students(id).then(function(response) {
          var index, ref;
          Api.logger(response);
          vm.paymentList(response);
          index = indexOfByObject(vm.studentsList(), 'id', id);
          return vm.payment.studentFullName((ref = vm.studentsList()[index]) != null ? ref.fullname : void 0);
        });
      }
    });
    return ko.applyBindings({
      vm: vm
    });
  });

}).call(this);
